# In this file you can override any option defined in the reference files.
# Copy in parts of the reference files and modify as you please.

akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  stdout-loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  scheduler {
    tick-duration = 10ms

    ticks-per-wheel = 512

    shutdown-timeout = 5s
  }

  serializers {
    java = akka.serialization.JavaSerializer
    kryo-Serializer = io.altoo.akka.serialization.kryo.KryoSerializer
  }

  serialization-bindings {
    "com.caidt.infrastructure.PlayerEnvelope" = kryo-Serializer
    "com.caidt.infrastructure.PlayerMessage" = kryo-Serializer
    "com.caidt.infrastructure.WorldEnvelope" = kryo-Serializer
    "com.caidt.infrastructure.WorldMessage" = kryo-Serializer
    "akka.actor.typed.ActorRef" = kryo-Serializer
    "akka.actor.typed.internal.adapter.ActorRefAdapter" = kryo-Serializer
    "akka.actor.typed.internal.receptionist.DefaultServiceKey" = kryo-Serializer
  }

  serialization.protobuf {

    # Additional classes that are allowed even if they are not defined in `serialization-bindings`.
    # It can be exact class name or name of super class or interfaces (one level).
    # This is useful when a class is not used for serialization any more and therefore removed
    # from `serialization-bindings`, but should still be possible to deserialize.
    whitelist-class = [
      "com.google.protobuf.GeneratedMessage",
      "com.google.protobuf.GeneratedMessageV3",
      "scalapb.GeneratedMessageCompanion",
      "akka.protobuf.GeneratedMessage"
    ]
  }

  //  remote {
  //    log-remote-lifecycle-events = off
  //    # The port clients should connect to. Default is 2552.
  //    netty.tcp.port = 2552
  //  }

  //  client {
  //    receptionist {
  //      role = "gate"
  //    }
  //  }
    extensions = [
      "akka.cluster.client.ClusterClientReceptionist"
    ]
}

akka.actor {

  provider = "cluster"

  # dispatcher
  actor-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min = 1
      core-pool-size-factor = 2.0
      core-pool-size-max = 2
    }
    throughput = 10
  }

  # router for common

  # mailbox
  large-unbounded-mailbox {
    mailbox-type = akka.dispatch.UnboundedMailbox
    mailbox-capacity = 10000
    stash-capacity = -1
  }

  small-unbounded-mailbox {
    mailbox-type = akka.dispatch.UnboundedMailbox
    mailbox-capacity = 1000
    stash-capacity = -1
  }
}

include "nr-of-members.conf"

akka.cluster {

  roles = ["world", "home", "battle", "data"]

  //  min-nr-of-members = 2
  seed-nodes = []
  seed-node-timeout = 5s

  auto-down-unreachable-after = off
  allow-weakly-up-members = on

  log-info = on
  log-info-verbose = off

  use-dispatcher = akka.actor.actor-dispatcher

  # how often should the node send out gossip information?
  gossip-interval = 1s
  # discard incoming gossip messages if not handled within this duration
  gossip-time-to-live = 2s

  # how often should the leader perform maintenance tasks?
  leader-actions-interval = 1s

  failure-detector {

    acceptable-heartbeat-pause = 7s

    heartbeat-interval = 1s
  }

  sharding {

    guardian-name = sharding

    number-of-shards = 1000

    retry-interval = 2s
    handoff-timeout = 60s
    rebalance-interval = 10s

    state-store-mode = ddata
  }
}