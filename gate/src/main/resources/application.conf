//include "shared.conf"

akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  //  loglevel = "DEBUG"
  //  stdout-loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-config-on-start = off

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  scheduler {
    tick-duration = 10ms

    ticks-per-wheel = 512

    shutdown-timeout = 5s
  }

  serializers {
    //    java = akka.serialization.JavaSerializer
    kryo-Serializer = io.altoo.akka.serialization.kryo.KryoSerializer
  }

  serialization-bindings {
    "java.io.Serializable" = kryo-Serializer
    "akka.actor.typed.ActorRef" = kryo-Serializer
    "akka.actor.typed.internal.adapter.ActorRefAdapter" = kryo-Serializer
    "akka.actor.typed.internal.receptionist.DefaultServiceKey" = kryo-Serializer
  }

  serialization.protobuf {

    # Additional classes that are allowed even if they are not defined in `serialization-bindings`.
    # It can be exact class name or name of super class or interfaces (one level).
    # This is useful when a class is not used for serialization any more and therefore removed
    # from `serialization-bindings`, but should still be possible to deserialize.
    whitelist-class = [
      "com.google.protobuf.GeneratedMessage",
      "com.google.protobuf.GeneratedMessageV3",
      "scalapb.GeneratedMessageCompanion",
      "akka.protobuf.GeneratedMessage"
    ]
  }

  remote {
    log-remote-lifecycle-events = off
    # The port clients should connect to. Default is 2552.
    netty.tcp.port = 2551
  }
  //
  //  client.receptionist {
  //    name = "gate"
  //    role = "gate"
  //  }
  //
  extensions = [
    "akka.cluster.client.ClusterClientReceptionist",
    "akka.cluster.pubsub.DistributedPubSub"
    "akka.cluster.ddata.DistributedData"
  ]
  extensions = [
    "akka.cluster.client.ClusterClientReceptionist",
    "akka.cluster.pubsub.DistributedPubSub"
  ]

}

# Settings for the ClusterClientReceptionist extension
akka.cluster.client.receptionist {
  # Actor name of the ClusterReceptionist actor, /system/receptionist
  name = gate
  # Start the receptionist on members tagged with this role.
  # All members are used if undefined or empty.
  role = "gate"
  # The receptionist will send this number of contact points to the client
  number-of-contacts = 3
  # The actor that tunnel response messages to the client will be stopped
  # after this time of inactivity.
  response-tunnel-receive-timeout = 30s
  # The id of the dispatcher to use for ClusterReceptionist actors.
  # If not specified default dispatcher is used.
  # If specified you need to define the settings of the actual dispatcher.
  use-dispatcher = ""
  # How often failure detection heartbeat messages should be received for
  # each ClusterClient
  heartbeat-interval = 2s
  # Number of potentially lost/delayed heartbeats that will be
  # accepted before considering it to be an anomaly.
  # The ClusterReceptionist is using the akka.remote.DeadlineFailureDetector, which
  # will trigger if there are no heartbeats within the duration
  # heartbeat-interval + acceptable-heartbeat-pause, i.e. 15 seconds with
  # the default settings.
  acceptable-heartbeat-pause = 13s
  # Failure detection checking interval for checking all ClusterClients
  failure-detection-interval = 2s
}

akka.actor.deployment {
  /uidRouter {
    router = round-robin-pool
    nr-of-intances = 3
  }
}